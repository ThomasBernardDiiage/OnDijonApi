// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnDijon.DataAccess;

#nullable disable

namespace OnDijon.DataAccess.Migrations
{
    [DbContext(typeof(OnDijonDbContext))]
    [Migration("20230416084750_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OnDijon.Domain.MeanOfLocomotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MeanOfLocomotion", (string)null);
                });

            modelBuilder.Entity("OnDijon.Domain.ReasonForTravel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReasonForTravel", (string)null);
                });

            modelBuilder.Entity("OnDijon.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateOfBirth")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MeanOfLocomotionId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReasonForTravelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MeanOfLocomotionId");

                    b.HasIndex("ReasonForTravelId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("OnDijon.Domain.User", b =>
                {
                    b.HasOne("OnDijon.Domain.MeanOfLocomotion", "MeanOfLocomotion")
                        .WithMany()
                        .HasForeignKey("MeanOfLocomotionId");

                    b.HasOne("OnDijon.Domain.ReasonForTravel", "ReasonForTravel")
                        .WithMany()
                        .HasForeignKey("ReasonForTravelId");

                    b.Navigation("MeanOfLocomotion");

                    b.Navigation("ReasonForTravel");
                });
#pragma warning restore 612, 618
        }
    }
}
